Data Structures Used:
Three structs were use to simulate the cache. The first was the cache which consisted of an array of sets. Then a set was an array of lines. A line had three components. The valid bit was an int that just indicated whether the line held a memory address. The tag which was an unsigned long int held the tag. Lastly I used a field called age which was int to indicate how long the line was in the cache to help implement FIFO.

Testing strategy:
To test the program I used the example given in the assignment description, and worked out what the correct output would be. After that I tested the code with the autograder to make sure my code worked with multiple different examples.

1. Prefetching affected both cache hit and memory reads by increasing each field. Through out testing these trends proved to be consistent. The reason cache hits increase is, because prefetching increases local spatiality, so the program predicts which memory is going to be needed and puts it in the cache. This increases the amount of hits, because when you look for something there is an increased chance it is in the cache. The reason memory reads increases, is because everytime the next block was not in the cache that value was incrememented. That is extra increments that were not implemented in the nonprefetched version of the cache. There are extra memory reads, because you are not only reading in the values in the trace file, but also values that are next to the ones you are reading in, in memory.

2. It would be possible to use my code to implement a two level cache. To do so, you would need to create double the amount of caches. Also the replacement procedure would need to be changed. When the oldest line is removed in my code, it would not be removed but rather transferred to the L2 cache. Then when it is the oldest one in the L2 cache it is eliminated. Besides replacement there would not need to be any significant changes to my code, because I wrote it to be fairly general purpose.

3. To implement a write-back cache or one that does immediately write back to memory, there would need to be an extra field added to each line. That field would be a 0 or 1 depending on if the data stored was written back to memory or not. If it was not yet written back that line could not be replaced or else that data would be lost. This would also in turn my replacement policy procedure, because I would have to check for this field before replacing the line. This would not be a difficult change to implement, because it is just a change to one of the structs and a change in the FIFO implementation.
